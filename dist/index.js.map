{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;AAAA,sDAA6B;AAC7B,oFAAkD;AAClD,gDAAuB;AACvB,2CAA8C;AAE9C,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAA;AACrB,MAAM,IAAI,GAAG,IAAI,CAAA;AACjB,MAAM,MAAM,GAAG,IAAA,cAAI,GAAE,CAAA;AAErB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;AAE5B,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACxB,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;AAC1B,CAAC,CAAC,CAAA;AACF,GAAG,CAAC,GAAG,CAAC,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC5C,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAA;IACxB,MAAM,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;IAClC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;QACjD,OAAO,EAAE;YACP,KAAK,EAAE,IAAI;SACZ;QACD,KAAK,EAAE,EAAE,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,UAAoB,CAAC,EAAE;KAC7D,CAAC,CAAA;IACF,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAChB,OAAM;AACR,CAAC,CAAC,CAAA;AACF,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC3C,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAA;IACxB,MAAM,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;IAClC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC5C,OAAO,EAAE;YACP,aAAa,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;SAC5C;QACD,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,CAAC,MAAM,CAAC,SAAmB,CAAC,EAAE;KAC3D,CAAC,CAAA;IACF,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAChB,OAAM;AACR,CAAC,CAAC,CAAA;AAEF,KAAK,MAAM,QAAQ,IAAI,IAAA,gCAAa,EAAC,GAAG,CAAC,EAAE,CAAC;IAC1C,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAA;AACrD,CAAC;AACD,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,iCAAiC,IAAI,EAAE,CAAC,CAAA;AACtD,CAAC,CAAC,CAAA","sourcesContent":["import express from 'express'\nimport listEndpoints from 'express-list-endpoints'\nimport pino from 'pino'\nimport { PrismaClient } from \"@prisma/client\";\n\nconst app = express()\nconst port = 3000\nconst logger = pino()\n\nlogger.info('Hello, World!')\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\napp.get('/campaign/award', async (req, res) => {\n  const params = req.query\n  const prisma = new PrismaClient();\n  const result = await prisma.awardCampaign.findMany({\n    include: {\n      award: true,\n    },\n    where: { campaignId: parseInt(params.campaignId as string) }\n  })\n  res.json(result)\n  return\n})\napp.get('/company/award', async (req, res) => {\n  const params = req.query\n  const prisma = new PrismaClient();\n  const result = await prisma.campaign.findMany({\n    include: {\n      awardCampaign: { include: { award: true } }\n    },\n    where: { companyId: parseInt(params.companyId as string) }\n  })\n  res.json(result)\n  return\n})\n\nfor (const endpoint of listEndpoints(app)) {\n  logger.info(`${endpoint.methods} ${endpoint.path}`)\n}\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`)\n})\n"]}